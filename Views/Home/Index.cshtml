@using EliteAthleteAppShared.Models.Home

@model HomeIndexVM

@{
	ViewData["Title"] = "Home Page";
}

@if (Model.IsLoggedIn == true)
{
	<div class="row">
		<div class="col-md-5">
			<br />
			@if (Model.TrainingPlanDetailsVM != null)
			{
				<div>
					<div class="card text-center">
						<div class="card-body" style="height: 100px;">
							<p>
								<a asp-action="UserChat" asp-route-userId="@Model.UserVM.CoachId" asp-controller="Users" class="btn btn-outline-primary-a d-block w-100 text-center"><strong><i class="fa-solid fa-comment-dots">&nbsp;</i>Chat with your coach</strong></a>
							</p>
							<p>
								@if (Model.TrainingPlanDetailsVM.Date.Value.ToString("dd-MM-yyyy") == DateTime.UtcNow.ToString("dd-MM-yyyy"))
								{
									<a asp-action="Details" asp-controller="TrainingPlans" class="btn btn-outline-primary-a d-block w-100 text-center"
									   asp-route-trainingPlanId="@Model.TrainingPlanDetailsVM.Id">
										<i class="fa-solid fa-dumbbell"></i> Today's Training Plan (@Model.TrainingPlanDetailsVM.Date.Value.ToString("dd-MM-yyyy"))
									</a>
								}
								else
								{
									<a asp-action="Details" asp-controller="TrainingPlans" class="btn btn-outline-primary-a d-block w-100 text-center"
									   asp-route-trainingPlanId="@Model.TrainingPlanDetailsVM.Id">
										<i class="fa-solid fa-dumbbell"></i> Last Training Plan (@Model.TrainingPlanDetailsVM.Date.Value.ToString("dd-MM-yyyy"))
									</a>
								}
							</p>
						</div>
					</div>
				</div>

				<div class="card">
					<div class="card-body">
						<div id="carouselExample" class="carousel slide">
							<div class="carousel-inner">
								@for (int i = 0; i < Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs.Count; i++)
								{
									<div class="carousel-item @(i == 0 ? "active" : "")">
										<div class="container">
											<dd class="col-sm-12 text-primary">
												<h4>@Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].Index): @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].ExerciseVM.Name)</h4>
											</dd>
											<dd class="col-sm-12">
												<iframe width="390" height="230" src="@Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].ExerciseVM.YoutubeLink" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
											</dd>
											<dd class="col-sm-12">
												<span class="text-primary">Category:</span> @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].ExerciseVM.ExerciseCategory.Name)
											</dd>
											<dd class="col-sm-12">
												<span class="text-primary">Description:</span>  @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].ExerciseVM.Description)
											</dd>
											<dd class="col-sm-12">
												<span class="text-primary">Amount:</span>  @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].Sets)x @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].Units)
											</dd>
											<dd class="col-sm-12">
												<span class="text-primary">Weight:</span>  @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].Weight)
											</dd>
											<dd class="col-sm-12">
												<span class="text-primary">Rest:</span>  @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].RestTime)
											</dd>
											<dd class="col-sm-12">
												<span class="text-primary">Notes:</span>  @Html.DisplayFor(modelItem => Model.TrainingPlanDetailsVM.TrainingPlanExerciseDetailVMs[i].Note)
											</dd>
										</div>
									</div>
								}
							</div>
							<button class="carousel-control-prev position-absolute start-0 translate-middle-y ms-4" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
								<span class="carousel-control-prev-icon" aria-hidden="true"></span>
								<span class="visually-hidden">Previous</span>
							</button>
							<button class="carousel-control-next position-absolute end-0 translate-middle-y me-4" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
								<span class="carousel-control-next-icon" aria-hidden="true"></span>
								<span class="visually-hidden">Next</span>
							</button>
						</div>
					</div>
				</div>
			}
			else
			{
				<div class="card">
					<p>
						<a asp-action="UserChat" asp-route-userId="@Model.UserVM.CoachId" asp-controller="Users" class="btn btn-outline-primary-a d-block w-100 text-center"><strong><i class="fa-solid fa-comment-dots">&nbsp;</i>Chat with your coach!</strong></a>
					</p>
					<p>
						<div class="card-body">
							<h1>NO TRAINING TO DISPLAY</h1>
						</div>
					</p>
				</div>
			}
		</div>
		<div class="col-md-7">
			<br />
			<div class="card">
				<div class="card-body">
					<canvas id="ormChart" width="800" height="251"></canvas>
					<canvas id="ubaChart" width="800" height="251"></canvas>
					<canvas id="ubmChart" width="800" height="250"></canvas>
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div class="card">
		<div class="card-body" style="height: 730px;">
			<div id="carouselExample" class="carousel slide" data-bs-ride="carousel">
				<div class="carousel-inner">
					<div class="carousel-item active">
						<div class="text-center">
							<h4 class="text-primary">Let your athletes easily track their results on the homepage.</h4>
						</div>
						<br />
						<img src="~/images/homepage.png" class="d-block w-100 img-fluid rounded" alt="Homepage">
					</div>
					<div class="carousel-item">
						<div class="text-center">
							<h4 class="text-primary">Add your own exercises and share them with other coaches.</h4>
						</div>
						<br />
						<img src="~/images/exercises.png" class="d-block w-100 img-fluid rounded" alt="Exercises">
					</div>
					<div class="carousel-item">
						<div class="text-center">
							<h4 class="text-primary">Easily manage the training plans with many built-in functionalities.</h4>
						</div>
						<br />
						<img src="~/images/trainingplans.png" class="d-block w-100 img-fluid rounded" alt="Training Plans">
					</div>
					<div class="carousel-item">
						<div class="text-center">
							<h4 class="text-primary">Use your private or global exercises in your athletes' training plans.</h4>
						</div>
						<br />
						<img src="~/images/manageexercise.png" class="d-block w-100 img-fluid rounded" alt="Manage Exercise">
					</div>
					<div class="carousel-item">
						<div class="text-center">
							<h4 class="text-primary">Track your athletes' results and important informations in the user panel.</h4>
						</div>
						<br />
						<img src="~/images/userpanel.png" class="d-block w-100 img-fluid rounded" alt="User Panel">
					</div>
					<div class="carousel-item">
						<div class="text-center">
							<h4 class="text-primary">Chat with your athletes on the built-in chat.</h4>
						</div>
						<br />
						<img src="~/images/chat.png" class="d-block w-100 img-fluid rounded" alt="Chat">
					</div>
				</div>
				<button class="carousel-control-prev position-absolute start-0 translate-middle-y ms-4" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
					<span class="carousel-control-prev-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Previous</span>
				</button>
				<button class="carousel-control-next position-absolute end-0 translate-middle-y me-4" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
					<span class="carousel-control-next-icon" aria-hidden="true"></span>
					<span class="visually-hidden">Next</span>
				</button>
			</div>
			<br />
			<p class="text-secondary text-end">By Jedrzej Koriat</p>
		</div>
	</div>
	
}

@section Scripts {
	@if (Model.IsLoggedIn)
	{
		<script>
			// Funkcja do inicjalizacji wykresu dla analizy ciała użytkownika (UserBodyAnalysisChartVM)
			function initializeUbaChart() {
				const labels = [
			@foreach (var point in Model.UserChartsVM.UserBodyAnalysisChartVM.WeightDataPointVMs)
			{
				@: '@point.Date?.ToString("yyyy-MM-dd")',
			}
																																												];

				const weightData = [
			@foreach (var point in Model.UserChartsVM.UserBodyAnalysisChartVM.WeightDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const fatPercentageData = [
			@foreach (var point in Model.UserChartsVM.UserBodyAnalysisChartVM.FatPercentageDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const musclePercentageData = [
			@foreach (var point in Model.UserChartsVM.UserBodyAnalysisChartVM.MusclePercentageDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const waterPercentageData = [
			@foreach (var point in Model.UserChartsVM.UserBodyAnalysisChartVM.WaterPercentageDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const data = {
					labels: labels,
					datasets: [
						{
							label: 'Weight',
							data: weightData,
							borderColor: 'rgba(255, 99, 132, 1)',
							backgroundColor: 'rgba(255, 99, 132, 0.2)',
							fill: false
						},
						{
							label: 'Fat Percentage',
							data: fatPercentageData,
							borderColor: 'rgba(54, 162, 235, 1)',
							backgroundColor: 'rgba(54, 162, 235, 0.2)',
							fill: false
						},
						{
							label: 'Muscle Percentage',
							data: musclePercentageData,
							borderColor: 'rgba(75, 192, 192, 1)',
							backgroundColor: 'rgba(75, 192, 192, 0.2)',
							fill: false
						},
						{
							label: 'Water Percentage',
							data: waterPercentageData,
							borderColor: 'rgba(153, 102, 255, 1)',
							backgroundColor: 'rgba(153, 102, 255, 0.2)',
							fill: false
						}
					]
				};

				const config = {
					type: 'line',
					data: data,
					options: {
						responsive: true,
						plugins: {
							tooltip: {
								mode: 'index',
								intersect: false,
							},
							legend: {
								display: true
							},
							title: {
								display: true,
								text: 'Body-Analysis Results' // Tutaj ustawiasz tytuł wykresu
							}
						},
						scales: {
							x: {
								type: 'category',
								title: {
									display: true,
									text: 'Date'
								}
							},
							y: {
								title: {
									display: true,
									text: 'Value'
								}
							}
						}
					}
				};

				// Inicjalizacja wykresu
				const ctx = document.getElementById('ubaChart').getContext('2d');
				const ubaChart = new Chart(ctx, config);
			}

			// Funkcja do inicjalizacji wykresu dla pomiarów ciała użytkownika (UserBodyMeasurementChartVM)
			function initializeUbmChart() {
				const labels = [
			@foreach (var point in Model.UserChartsVM.UserBodyMeasurementsChartVM.ChestDataPointVMs)
			{
				@: '@point.Date?.ToString("yyyy-MM-dd")',
			}
																																												];

				const chestData = [
			@foreach (var point in Model.UserChartsVM.UserBodyMeasurementsChartVM.ChestDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const armsData = [
			@foreach (var point in Model.UserChartsVM.UserBodyMeasurementsChartVM.ArmsDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const waistData = [
			@foreach (var point in Model.UserChartsVM.UserBodyMeasurementsChartVM.WaistDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const thighsData = [
			@foreach (var point in Model.UserChartsVM.UserBodyMeasurementsChartVM.ThighsDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const hipsData = [
			@foreach (var point in Model.UserChartsVM.UserBodyMeasurementsChartVM.HipsDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const data = {
					labels: labels,
					datasets: [
						{
							label: 'Chest',
							data: chestData,
							borderColor: 'rgba(255, 99, 132, 1)',
							backgroundColor: 'rgba(255, 99, 132, 0.2)',
							fill: false
						},
						{
							label: 'Arms',
							data: armsData,
							borderColor: 'rgba(54, 162, 235, 1)',
							backgroundColor: 'rgba(54, 162, 235, 0.2)',
							fill: false
						},
						{
							label: 'Waist',
							data: waistData,
							borderColor: 'rgba(75, 192, 192, 1)',
							backgroundColor: 'rgba(75, 192, 192, 0.2)',
							fill: false
						},
						{
							label: 'Thighs',
							data: thighsData,
							borderColor: 'rgba(153, 102, 255, 1)',
							backgroundColor: 'rgba(153, 102, 255, 0.2)',
							fill: false
						},
						{
							label: 'Hips',
							data: hipsData,
							borderColor: 'rgba(255, 159, 64, 1)',
							backgroundColor: 'rgba(255, 159, 64, 0.2)',
							fill: false
						}
					]
				};

				const config = {
					type: 'line',
					data: data,
					options: {
						responsive: true,
						plugins: {
							tooltip: {
								mode: 'index',
								intersect: false,
							},
							legend: {
								display: true
							},
							title: {
								display: true,
								text: 'Body-Measurement Results' // Tutaj ustawiasz tytuł wykresu
							}
						},
						scales: {
							x: {
								type: 'category',
								title: {
									display: true,
									text: 'Date'
								}
							},
							y: {
								title: {
									display: true,
									text: 'Value'
								}
							}
						}
					}
				};

				// Inicjalizacja wykresu
				const ctx = document.getElementById('ubmChart').getContext('2d');
				const ubmChart = new Chart(ctx, config);
			}

			// Funkcja do inicjalizacji wykresu
			function initializeOrmChart() {
				// Przygotowanie danych dla wykresu
				const labels = [
			@foreach (var point in Model.UserChartsVM.TrainingOrmChartVM.BenchPressDataPointVMs)
			{
				@: '@point.Date?.ToString("yyyy-MM-dd")',
			}
																																												];

				const benchPressData = [
			@foreach (var point in Model.UserChartsVM.TrainingOrmChartVM.BenchPressDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const overheadPressData = [
			@foreach (var point in Model.UserChartsVM.TrainingOrmChartVM.OverheadPressDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const deadliftData = [
			@foreach (var point in Model.UserChartsVM.TrainingOrmChartVM.DeadliftDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const squatData = [
			@foreach (var point in Model.UserChartsVM.TrainingOrmChartVM.SquatDataPointVMs)
			{
				@: @point.Value,
			}
																																												];

				const data = {
					labels: labels,
					datasets: [
						{
							label: 'Bench Press',
							data: benchPressData,
							borderColor: 'rgba(255, 99, 132, 1)',
							backgroundColor: 'rgba(255, 99, 132, 0.2)',
							fill: false
						},
						{
							label: 'Overhead Press',
							data: overheadPressData,
							borderColor: 'rgba(54, 162, 235, 1)',
							backgroundColor: 'rgba(54, 162, 235, 0.2)',
							fill: false
						},
						{
							label: 'Deadlift',
							data: deadliftData,
							borderColor: 'rgba(75, 192, 192, 1)',
							backgroundColor: 'rgba(75, 192, 192, 0.2)',
							fill: false
						},
						{
							label: 'Squat',
							data: squatData,
							borderColor: 'rgba(153, 102, 255, 1)',
							backgroundColor: 'rgba(153, 102, 255, 0.2)',
							fill: false
						}
					]
				};

				const config = {
					type: 'line',
					data: data,
					options: {
						responsive: true,
						plugins: {
							tooltip: {
								mode: 'index',
								intersect: false,
							},
							legend: {
								display: true
							},
							title: {
								display: true,
								text: 'One-Repetition Max Results' // Tutaj ustawiasz tytuł wykresu
							}
						},
						scales: {
							x: {
								type: 'category',
								title: {
									display: true,
									text: 'Date'
								}
							},
							y: {
								title: {
									display: true,
									text: 'Value'
								}
							}
						}
					}
				};

				// Inicjalizacja wykresu
				const ctx = document.getElementById('ormChart').getContext('2d');
				const ormChart = new Chart(ctx, config);
			}


			window.onload = function () {
				initializeUbaChart();
				initializeUbmChart();
				initializeOrmChart();
			};

		</script>
	}

}