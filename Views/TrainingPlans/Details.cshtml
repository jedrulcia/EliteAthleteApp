@using TrainingPlanApp.Web.Models.TrainingPlan
@using TrainingPlanApp.Web.Constants

@model TrainingPlanDetailsVM

@{
	ViewData["Title"] = "Details";
}

@for (int i = 0; i < Model.ExerciseVMs.Count; i++)
{
	<h1>@Html.DisplayFor(modelItem => Model.Indices[i]): @Html.DisplayFor(modelItem => Model.ExerciseVMs[i].Name) - @Html.DisplayFor(modelItem => Model.ExerciseVMs[i].ExerciseCategory.Name)</h1>
	<dd class="col-sm-12">
		@{
			var mainVideoUrl = Model.ExerciseVMs[i].VideoLink;
			var mainVideoId = mainVideoUrl.Split(new[] { "v=" }, StringSplitOptions.None)[1];
			var mainEmbedUrl = "https://www.youtube.com/embed/" + mainVideoId;
		}
		<iframe width="560" height="315" src="@mainEmbedUrl" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
	</dd>
	<dd class="col-sm-12">
		@Html.DisplayFor(modelItem => Model.ExerciseVMs[i].Description)
	</dd>
	<dd class="col-sm-12">
		@Html.DisplayFor(modelItem => Model.Sets[i])x @Html.DisplayFor(modelItem => Model.Units[i])
	</dd>
	<dd class="col-sm-12">
		Weight: @Html.DisplayFor(modelItem => Model.Weights[i])
	</dd>
	<dd class="col-sm-12">
		Rest: @Html.DisplayFor(modelItem => Model.RestTimes[i])
	</dd>
	<dd class="col-sm-12">
		Notes: @Html.DisplayFor(modelItem => Model.Notes[i])
	</dd>
}