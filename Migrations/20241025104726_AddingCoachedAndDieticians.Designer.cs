// <auto-generated />
using System;
using EliteAthleteApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EliteAthleteApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241025104726_AddingCoachedAndDieticians")]
    partial class AddingCoachedAndDieticians
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EliteAthleteApp.Data.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MealIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealQuantities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExerciseCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseMuscleGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SetAsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.ExerciseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExerciseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Conditioning"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Strength"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mobility"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Stretching"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Plyometrics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dynamics"
                        },
                        new
                        {
                            Id = 7,
                            Name = " "
                        });
                });

            modelBuilder.Entity("EliteAthleteApp.Data.ExerciseMuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExerciseMuscleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neck"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Core"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Forearms/Wrist"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Glutes"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Lower Back"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Quadriceps"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Hamstrings"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Calves"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Trapezius"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Adductors"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Abductors"
                        });
                });

            modelBuilder.Entity("EliteAthleteApp.Data.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Carbohydrates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DieticianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Fats")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Fibres")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IngredientCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Proteins")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("SetAsPublic")
                        .HasColumnType("bit");

                    b.Property<int?>("SuggestedPortion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.IngredientCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IngredientCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Meats"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Grains"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Fats and Oils"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nuts and Seeds"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Herbs and Spices"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Legumes"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Baked Goods"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Pasta and Noodles"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sweets"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Supplements"
                        });
                });

            modelBuilder.Entity("EliteAthleteApp.Data.Meal", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("DieticianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientQuantities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MealCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SetAsPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.MealCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vegetarian"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gluten-Free"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Low-Calorie"
                        },
                        new
                        {
                            Id = 6,
                            Name = "High-Protein"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Low-Carb"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Paleo"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ketogenic"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Dairy-Free"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sugar-Free"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Raw"
                        },
                        new
                        {
                            Id = 13,
                            Name = "With Superfoods"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Diet-Friendly"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Functional"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Allergen-Free"
                        });
                });

            modelBuilder.Entity("EliteAthleteApp.Data.TrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingPlanIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingModules");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.TrainingModuleORM", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("BenchPressORM")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeadliftORM")
                        .HasColumnType("int");

                    b.Property<int?>("OverheadPressORM")
                        .HasColumnType("int");

                    b.Property<int?>("SquatORM")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingModuleORMs");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Raport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainingModuleId")
                        .HasColumnType("int");

                    b.Property<string>("TrainingPlanExerciseDetailIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.TrainingPlanExerciseDetail", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sets")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingPlanPhaseId")
                        .HasColumnType("int");

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanExerciseDetails");
                });

            modelBuilder.Entity("EliteAthleteApp.Data.TrainingPlanPhase", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanPhases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Warm-up"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mobility"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Strength Training"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Core Training"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cardio/Conditioning"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cool Down"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Stretching"
                        });
                });

            modelBuilder.Entity("EliteAthleteApp.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DieticianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            AccessFailedCount = 0,
                            CoachId = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            ConcurrencyStamp = "f320104d-bbf1-4877-a183-9a0b5b1cf2fb",
                            DieticianId = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECPW7d8qg74wxXWbE0HykX4AoSEEUBmHHNDnC9BXoJ5bUWlFq6cFmeqXvFC08O8Trg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8688657a-d455-4770-9abc-84191ab450e7",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b1",
                            AccessFailedCount = 0,
                            CoachId = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            ConcurrencyStamp = "ae5b64be-fb1b-4a0c-a7c0-485ddbf71739",
                            DieticianId = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEElsHSwOQXdGbsRgIu0hiVMLL2A5pSPYoSx56f90GN2sK17z4agHOd+l5U301aEj7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1f6148b-8302-4a77-9738-b0bbb04642c3",
                            TwoFactorEnabled = false,
                            UserName = "user@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b2",
                            AccessFailedCount = 0,
                            CoachId = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            ConcurrencyStamp = "628e593f-1193-4356-80d3-f8294b2e2e29",
                            DieticianId = "654bced5-375b-5291-0a59-1dc59923d1b2",
                            Email = "dietician@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Dietician",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIETICIAN@LOCALHOST.COM",
                            NormalizedUserName = "DIETICIAN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHku8/Ke3IV6rRsnPW/XTHl+pQqcFxOP6IXoCQTPGrliSufaxE3BueszegorTCKTVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7bbdfef-3286-4d29-b91a-827ebb9dbfb4",
                            TwoFactorEnabled = false,
                            UserName = "dietician@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b3",
                            AccessFailedCount = 0,
                            CoachId = "654bced5-375b-5291-0a59-1dc59923d1b3",
                            ConcurrencyStamp = "4da88086-4eba-443c-9fa8-61daa8c076ab",
                            DieticianId = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            Email = "coach@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Coach",
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH@LOCALHOST.COM",
                            NormalizedUserName = "COACH@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzNHqrHyYrzmBvpcCn6i078mzhEql54PaPsdzthlCynQhKurlq697ad75RrLJR8ZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3369f7c-d8b2-40a2-9c51-c2b7c916a4c8",
                            TwoFactorEnabled = false,
                            UserName = "coach@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            AccessFailedCount = 0,
                            CoachId = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            ConcurrencyStamp = "68017741-40a1-4411-84c2-c2cda2f45240",
                            DieticianId = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            Email = "full@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Full",
                            LockoutEnabled = false,
                            NormalizedEmail = "FULL@LOCALHOST.COM",
                            NormalizedUserName = "FULL@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC4HS+50mcNCfQVwfGsLc6jXT59N2ZOMddQByCOr+6w7ypvByds1lmwMG4seeh+bOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e1b759a-831a-4428-9429-4b6626286894",
                            TwoFactorEnabled = false,
                            UserName = "full@localhost.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b2",
                            Name = "Dietician",
                            NormalizedName = "DIETICIAN"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b3",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b4",
                            Name = "Full",
                            NormalizedName = "FULL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b0"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b1",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b1"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b2",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b2"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b3",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b3"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EliteAthleteApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EliteAthleteApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EliteAthleteApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EliteAthleteApp.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
