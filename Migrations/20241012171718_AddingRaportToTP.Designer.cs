// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingPlanApp.Web.Data;

#nullable disable

namespace TrainingPlanApp.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241012171718_AddingRaportToTP")]
    partial class AddingRaportToTP
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b2",
                            Name = "Dietician",
                            NormalizedName = "DIETICIAN"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b3",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        },
                        new
                        {
                            Id = "543bced5-375b-5291-0a59-1dc59923d1b4",
                            Name = "Full",
                            NormalizedName = "FULL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b0"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b1",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b1"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b2",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b2"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b3",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b3"
                        },
                        new
                        {
                            UserId = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            RoleId = "543bced5-375b-5291-0a59-1dc59923d1b4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MealIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MealQuantities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExerciseCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseMuscleGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SetAsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.ExerciseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExerciseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Conditioning"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Strength"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mobility"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Stretching"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Plyometrics"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dynamics"
                        },
                        new
                        {
                            Id = 7,
                            Name = " "
                        });
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.ExerciseMuscleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExerciseMuscleGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neck"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Core"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Forearms/Wrist"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Glutes"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Lower Back"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Quadriceps"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Hamstrings"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Calves"
                        });
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Carbohydrates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DieticianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Fats")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Fibres")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IngredientCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Proteins")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("SetAsPublic")
                        .HasColumnType("bit");

                    b.Property<int?>("SuggestedPortion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.IngredientCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IngredientCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Meats"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Grains"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Fats and Oils"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nuts and Seeds"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Herbs and Spices"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Legumes"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Baked Goods"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Pasta and Noodles"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sweets"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Supplements"
                        });
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.Meal", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("DieticianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientQuantities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MealCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SetAsPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.MealCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vegetarian"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gluten-Free"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Low-Calorie"
                        },
                        new
                        {
                            Id = 6,
                            Name = "High-Protein"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Low-Carb"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Paleo"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ketogenic"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Dairy-Free"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sugar-Free"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Raw"
                        },
                        new
                        {
                            Id = 13,
                            Name = "With Superfoods"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Diet-Friendly"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Functional"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Allergen-Free"
                        });
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.TrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingPlanIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingModules");
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.TrainingModuleORM", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("BenchPressORM")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeadliftORM")
                        .HasColumnType("int");

                    b.Property<int?>("OverheadPressORM")
                        .HasColumnType("int");

                    b.Property<int?>("SquatORM")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingModuleORMs");
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoachId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExerciseIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Raport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainingModuleId")
                        .HasColumnType("int");

                    b.Property<string>("TrainingPlanPhaseIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weights")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.TrainingPlanPhase", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanPhases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            Name = "Warm-up"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mobility"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Strength Training"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Core Training"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cardio/Conditioning"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cool Down"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Stretching"
                        });
                });

            modelBuilder.Entity("TrainingPlanApp.Web.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DieticianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc53b09e-23d5-4f1e-abb1-445d2c528226",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIVnFsOlaWH4k6omVTOFYIRn+X0lRwusdVaR0ZR3upoghdpeCYEz9RytlEbStAixQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fe223ae-39c9-47e1-ba56-95e04df1643f",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "859c76a6-7756-4197-bfce-fb1554ad0336",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKyGoro0mMkk34GGlzY6yMNauT0sRimbhe18JO9/Uba/B48Rxv08CJQXw5FMpVX+TQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3939c3ee-266f-4cb5-8cb6-6846c9809eac",
                            TwoFactorEnabled = false,
                            UserName = "user@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12d241d3-46a8-4778-93eb-cec9b4475364",
                            Email = "dietician@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Dietician",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIETICIAN@LOCALHOST.COM",
                            NormalizedUserName = "DIETICIAN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5W110felwSUrR1idV6eoWknvlFXMut3nf0A/mNWed7t8xM+X6kFagWHDySZak1wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1691d81e-85a0-4fb0-9597-1ac22d8cbec0",
                            TwoFactorEnabled = false,
                            UserName = "dietician@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b080838-eabb-472f-89ed-a5d1df18ebc9",
                            Email = "coach@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Coach",
                            LockoutEnabled = false,
                            NormalizedEmail = "COACH@LOCALHOST.COM",
                            NormalizedUserName = "COACH@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzt9wp+YfV+oXzhI8ulNjLUss0I/gdxeJzk86bHt6Six8kTbw3piOHr8pQ10NCpvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2865e05-8b18-480c-846d-96338c008014",
                            TwoFactorEnabled = false,
                            UserName = "coach@localhost.com"
                        },
                        new
                        {
                            Id = "654bced5-375b-5291-0a59-1dc59923d1b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb62d402-a2da-4af8-9096-71e2343e776b",
                            Email = "full@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Full",
                            LockoutEnabled = false,
                            NormalizedEmail = "FULL@LOCALHOST.COM",
                            NormalizedUserName = "FULL@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEG0ImmyojymQDSTiUM5TIsQqdGat75HQD8OT638UqWTvNCE5Bwr/H24xVAKLr4QDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6403a95-e9e2-4f06-9ebd-7472a5ee697c",
                            TwoFactorEnabled = false,
                            UserName = "full@localhost.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrainingPlanApp.Web.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrainingPlanApp.Web.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingPlanApp.Web.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrainingPlanApp.Web.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
